from spotipy import Spotify, SpotifyException
import requests
from bs4 import BeautifulSoup


def get_artist(name: str, sp: Spotify):
    results = sp.search(q='' + name, type='artist')
    items = results['artists']['items']
    if len(items) > 0:
        # Get the top search result
        return items[0]
    else:
        return None


def get_artists(name: str, sp: Spotify):
    results = sp.search(q='' + name, type='artist')
    items = results['artists']['items']
    if len(items) > 0:
        # Get all the search results
        return items
    else:
        return None


def scrape_music_map(artist: str):
    url = f"https://www.music-map.com/{artist}"
    page = requests.get(url)

    if page.status_code != 200:
        print("Page load unsuccesful")

    soup = BeautifulSoup(page.text, 'html.parser')
    sw = soup.find('div', id='gnodMap')

    if sw is None:
        print("artist not found")

    similar_artists = sw.find_all('a', class_='S')
    result = []

    for artist in similar_artists:
        result.append(artist.text)

    return result  # The first artist in the list is the artist itself. Use to verify that correct artist was selected.


def generate_playlist(artist: str, sp_user: Spotify, sp_app: Spotify):
    similar_artists = scrape_music_map(artist)
    playlist_name = artist + ' recommendations'
    track_ids = []
    for artist in similar_artists:
        try:
            page = get_artist(artist, sp_app)
            artist_id = page['uri']
            top_tracks = sp_app.artist_top_tracks(artist_id)
            track = top_tracks['tracks'][0]['uri']
            track_ids.append(track)
        except Exception as e:
            print(e)
    if track_ids:
        playlist = sp_user.user_playlist_create(sp_user.me()['id'], playlist_name, public=True,
                                                description='generated by '
                                                            'FindSimilarArtists')
        playlist_id = playlist['uri']
        sp_user.user_playlist_add_tracks(sp_user.me()['id'], playlist_id, track_ids)
    else:
        print("track_ids is empty")


def monitor_rate_limit(f):
    try:
        f()
        return True
    except SpotifyException:
        return False

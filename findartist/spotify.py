from spotipy import Spotify, SpotifyException
import requests
from bs4 import BeautifulSoup


def get_artist(name: str, sp: Spotify):
    """
    Search Spotify for an artist
    :param name: name of artist
    :param sp: Spotify object to be used with the API query
    :return: the top search result artist
    """
    results = sp.search(q='' + name, type='artist')
    items = results['artists']['items']
    if len(items) > 0:
        # Get the top search result
        return items[0]
    else:
        print(name + ": no matches on Spotify")
        return None


def scrape_music_map(artist: str):
    """
        :param artist: name of the artist
        :return: a list of similar artists
    """
    url = f"https://www.music-map.com/{artist}"
    page = requests.get(url)

    if page.status_code != 200:
        print("Page load unsuccesful")

    soup = BeautifulSoup(page.text, 'html.parser')
    sw = soup.find('div', id='gnodMap')

    if sw is None:
        print("artist not found")

    similar_artists = sw.find_all('a', class_='S')
    result = []

    for artist in similar_artists:
        result.append(artist.text)

    return result  # The first artist in the list is the artist itself. Use to verify that correct artist was selected.


def generate_playlist(artist: str, sp_user: Spotify, sp_app: Spotify):
    """
    Generates a playlist of top songs of similar artists.
    :param artist: the name of the artist
    :param sp_user: a Spotify object authenticated by the user who will be creating the playlist
    :param sp_app: a Spotify object authenticated by the app for a higher rate limit
    """
    similar_artists = scrape_music_map(artist)
    playlist_name = artist + ' recommendations'
    track_ids = []
    for artist in similar_artists:
        try:
            page = get_artist(artist, sp_app)
            if page is None:
                continue
            artist_id = page['uri']
            top_tracks = sp_app.artist_top_tracks(artist_id)
            track = top_tracks['tracks'][0]['uri']
            track_ids.append(track)
        except SpotifyException as e:
            print(e)
            print(e.http_status)

            return

    if track_ids:
        try:
            playlist = sp_user.user_playlist_create(sp_user.me()['id'], playlist_name, public=True,
                                                    description='generated by '
                                                                'FindSimilarArtists')
            playlist_id = playlist['uri']
            sp_user.user_playlist_add_tracks(sp_user.me()['id'], playlist_id, track_ids)
        except SpotifyException as e:
            print(e)
            print(e.http_status)
    else:
        print("track_ids is empty")
        print("Similar artists:" + similar_artists)

